def solve_gumball_puzzle(chosen_machine_label, gumball_color):
    """
    Решает головоломку на основе одного действия:
    покупки одной жвачки из стратегически выбранного автомата.
    """
    print(f"\n--- ЗАПУСК СИМУЛЯЦИИ ---")
    print(f"ДЕЙСТВИЕ: Куплена жвачка из автомата с наклейкой '{chosen_machine_label}'.")
    print(f"РЕЗУЛЬТАТ: Выпала {gumball_color.lower()} жвачка.")
    print("--------------------------\n")

    # Начальное состояние: словарь с наклейками, содержимое неизвестно.
    solution = {
        "Красная": "Неизвестно",
        "Зелёная": "Неизвестно",
        "Красная и зелёная": "Неизвестно"
    }

    # ГЛАВНОЕ ПРАВИЛО: ни одна наклейка не верна.
    # Из этого следует, что автомат 'Красная и зелёная' НЕ МОЖЕТ содержать смесь.
    # Он содержит либо только красные, либо только зелёные.

    if chosen_machine_label != "Красная и зелёная":
        print("ОШИБКА СТРАТЕГИИ! Вы выбрали не тот автомат.")
        print("Покупка из автоматов 'Красная' или 'Зелёная' не даёт 100% информации.")
        print("Если из 'Красная' выпадет красная, вы не будете знать, это смесь или только зелёные (второй цвет).")
        return None

    # --- Шаг 1: Определяем содержимое выбранного автомата ---
    if gumball_color == "Красная":
        actual_content_of_chosen = "Только красные"
    else: # gumball_color == "Зелёная"
        actual_content_of_chosen = "Только зелёные"
    
    solution[chosen_machine_label] = actual_content_of_chosen
    print(f"ЛОГИЧЕСКИЙ ВЫВОД 1: Автомат '{chosen_machine_label}' на самом деле содержит '{actual_content_of_chosen}'.")
    
    # --- Шаг 2: Определяем содержимое оставшихся автоматов методом исключения ---
    if actual_content_of_chosen == "Только красные":
        # Рассматриваем автомат 'Зелёная'.
        # Он не может быть 'Только зелёные' (наклейка врёт).
        # Он не может быть 'Только красные' (мы его уже нашли).
        # Значит, он 'Смесь'.
        solution["Зелёная"] = "Смесь"
        print("ЛОГИЧЕСКИЙ ВЫВОД 2: Автомат 'Зелёная' не может быть ни зелёным, ни красным, значит, он 'Смесь'.")

        # Оставшийся автомат 'Красная' по остаточному принципу 'Только зелёные'.
        solution["Красная"] = "Только зелёные"
        print("ЛОГИЧЕСКИЙ ВЫВОД 3: Автомату 'Красная' остаётся быть 'Только зелёные'.")

    elif actual_content_of_chosen == "Только зелёные":
        # Рассматриваем автомат 'Красная'.
        # Он не может быть 'Только красные' (наклейка врёт).
        # Он не может быть 'Только зелёные' (мы его уже нашли).
        # Значит, он 'Смесь'.
        solution["Красная"] = "Смесь"
        print("ЛОГИЧЕСКИЙ ВЫВОД 2: Автомат 'Красная' не может быть ни красным, ни зелёным, значит, он 'Смесь'.")

        # Оставшийся автомат 'Зелёная' по остаточному принципу 'Только красные'.
        solution["Зелёная"] = "Только красные"
        print("ЛОГИЧЕСКИЙ ВЫВОД 3: Автомату 'Зелёная' остаётся быть 'Только красные'.")

    return solution


if __name__ == "__main__":
    print("ГОЛОВОЛОМКА: Три автомата, все наклейки неверны.")
    print("СТРАТЕГИЯ: Купить одну жвачку из автомата с наклейкой 'Красная и зелёная'.\n")

    # Сценарий 1: Выпала красная жвачка
    final_mapping_1 = solve_gumball_puzzle("Красная и зелёная", "Красная")
    if final_mapping_1:
        print("\nИТОГОВАЯ КАРТА АВТОМАТОВ (Сценарий 1):")
        for label, content in final_mapping_1.items():
            print(f"  Наклейка '{label}' -> Содержимое '{content}'")
    
    print("\n=======================================================\n")

    # Сценарий 2: Выпала зелёная жвачка
    final_mapping_2 = solve_gumball_puzzle("Красная и зелёная", "Зелёная")
    if final_mapping_2:
        print("\nИТОГОВАЯ КАРТА АВТОМАТОВ (Сценарий 2):")
        for label, content in final_mapping_2.items():
            print(f"  Наклейка '{label}' -> Содержимое '{content}'")